// Class to perform Comparison sorting
public class ComparisonSort {
	public int[] comparisonSort(int arr[], int length) {
		if (length <= 10)
			// Calling bubbleSort function when number of elements is less than 10
			arr = bubbleSorting(arr);
		else
			// Calling quickSort function when number of elements is greater than 10
			arr = quickSort(arr, 0, length - 1);
		return arr;
	}

	// Function to sort array using quick sort mechanism
	int[] quickSort(int arr[], int start, int end) {
		int i, j, pivot, temp = 0;
		if (start <= end) {
			i = start;
			j = end;
			// Assigning pivot with start index of array
			pivot = start;
			while (i < j) {
				while (arr[i] <= arr[pivot] && i < end) {
					i++;
				}
				while (arr[j] > arr[pivot] && j >= start) {
					j--;
				}
				// Swapping values of i and j
				if (i < j) {
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
			// Swapping pivot with value of j when i and j cross each other
			temp = arr[j];
			arr[j] = arr[pivot];
			arr[pivot] = temp;
			// Recursive call
			quickSort(arr, start, j - 1);
			quickSort(arr, j + 1, end);
		}
		return arr;
	}

	// Function to sort array using bubble sort mechanism
	public int[] bubbleSorting(int arr[]) {
		int temporaryVariable = 0;
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr.length - i - 1; j++) {
				if (arr[j] > arr[j + 1]) {
					temporaryVariable = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temporaryVariable;
				}
			}
		}
		return arr;
	}
}
