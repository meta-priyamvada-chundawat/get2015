// Class to perform Linear sorting
public class LinearSort {
	public int[] linearSort(int arr[], int length) {
		if (length <= 10)
			// Calling countSort function when number of elements is less than
			// 10
			arr = countSorting(arr);
		else
			// Calling radixSort function when number of elements is greater
			// than 10
			arr = radixSorting(arr);
		return arr;
	}

	// Function to perform radix sort
	public int[] radixSorting(int arr[]) {
		int maxElement = arr[0];
		int result[] = new int[arr.length];
		int bucket[] = new int[arr.length];
		int output[] = new int[10];
		int exp = 10;
		int k;
		int temporarayArray[] = new int[arr.length];
		// Calculating maximum element
		for (int i = 1; i < arr.length; i++) {
			if (arr[i] > maxElement)
				maxElement = arr[i];
		}

		int countDigits = 1;
		// Counting number of digits of maximum number
		while (maxElement / 10 > 0) {
			countDigits++;
			maxElement = maxElement / 10;
		}
		// Creating copy of array
		for (int i = 0; i < result.length; i++) {
			result[i] = arr[i];
		}
		while (countDigits > 0) {
			k = 0;
			for (int i = 0; i < result.length; i++) {
				temporarayArray[i] = result[i] % exp;
				result[i] = result[i] / 10;
			}
			for (int i = 0; i < arr.length; i++) {
				for (int j = 0; j < 10; j++) {
					if (temporarayArray[i] == j) {
						bucket[j]++;
					}
				}
			}
			// Applying count sort
			for (int j = 0; j < 10; j++) {
				while (bucket[j] > 0) {
					for (int i = 0; i < arr.length; i++) {
						if (j == temporarayArray[i]) {
							output[k] = arr[i];
							k++;
							bucket[j]--;
						}
					}
				}
			}
			exp *= 10;
			countDigits--;
		}
		return output;
	}

	// Applying count sort
	public int[] countSorting(int arr[]) {
		int max = arr[0];
		for (int i = 1; i < arr.length; i++) {
			if (arr[i] > max)
				max = arr[i];
		}
		int length = max + 1;
		int result[] = new int[length];
		int output[] = new int[length];
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < length; j++) {
				if (arr[i] == j) // Increasing array count
					result[j] += 1;
			}
		}
		int k = 0;
		for (int i = 0; i < length; i++) {
			while (result[i] > 0) {
				output[k] = i;
				k++;
				result[i]--;
			}
		}
		// Return array after sorting
		return output;
	}
}
