import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class DifferentSortTest {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void NormalBubbleSortTest() {
		ComparisonSort bubble = new ComparisonSort();
		int[] array = { 45, 87, 54, 9, 0 };
		int[] result = { 0, 9, 45, 54, 87 };
		assertArrayEquals(result, bubble.bubbleSorting(array));
	}

	@Test
	public void DuplicateBubbleSortTest() {
		ComparisonSort bubble = new ComparisonSort();
		int[] array = { 45, 87, 54, 9, 0, 9 };
		int[] result = { 0, 9, 9, 45, 54, 87 };
		assertArrayEquals(result, bubble.bubbleSorting(array));
	}

	@Test
	public void NegativeBubbleSortTest() {
		ComparisonSort bubble = new ComparisonSort();
		int[] array = { 45, 87, 54, -9, 0, 9 };
		int[] result = { -9, 0, 9, 45, 54, 87 };
		assertArrayEquals(result, bubble.bubbleSorting(array));
	}

	@Test
	public void NormalQuickSortTest() {
		ComparisonSort quick = new ComparisonSort();
		int[] array = { 45, 87, 54, 9, 0 };
		int[] result = { 0, 9, 45, 54, 87 };
		assertArrayEquals(result, quick.quickSort(array, 0, 4));
	}

	@Test
	public void NormalCountingSortTest() {
		LinearSort counting = new LinearSort();
		int[] array = { 45, 87, 54, 9, 0 };
		int[] result = { 0, 9, 45, 54, 87 };
		assertArrayEquals(result, counting.countSorting(array));
	}

	@Test
	public void DuplicateCountingSortTest() {
		LinearSort counting = new LinearSort();
		int[] array = { 45, 87, 54, 9, 0, 9 };
		int[] result = { 0, 9, 9, 45, 54, 87 };
		assertArrayEquals(result, counting.countSorting(array));
	}

	@Test
	public void NormalRadixSortTest() {
		LinearSort raddix = new LinearSort();
		int[] array = { 45, 87, 54, 90, 57 };
		int[] result = { 45, 54, 57, 87, 90 };
		assertArrayEquals(result, raddix.radixSorting(array));
	}
}
