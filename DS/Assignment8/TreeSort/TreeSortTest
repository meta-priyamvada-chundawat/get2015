import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class TreeSortTest {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	// Positive Test Case
	@Test
	public void testForPositive() {
		int arr[] = { 1, 5, 2, 4, 3 };
		int result[] = { 1, 2, 3, 4, 5 };
		int output[] = new int[5];
		TreeSortImplementation<Integer> treeSort = new TreeSortImplementation<Integer>();
		Node<Integer> node = new Node<Integer>(arr[0]);
		for (int i = 1; i < 5; i++) {
			treeSort.insertTree(node, arr[i]);
		}
		output = treeSort.inorder(node, arr);
		assertArrayEquals(output, result);
	}

	// Negative Test Case
	@Test
	public void testForNegative() {
		int arr[] = { 1, 5, 2, 4, 3 };
		int result[] = { 0, 3, 2, 4, 5 };
		int output[] = new int[5];
		TreeSortImplementation<Integer> treeSort = new TreeSortImplementation<Integer>();
		Node<Integer> node = new Node<Integer>(arr[0]);
		for (int i = 1; i < 5; i++) {
			treeSort.insertTree(node, arr[i]);
		}
		output = treeSort.inorder(node, arr);
		assertNotEquals(result, output);
	}

	// Test Case for no node value
	@Test
	public void testForNull() {
		int arr[] = {0,0,0,0,0};
		int result[] = {0,0,0,0,0};
		int output[] = new int[5];
		TreeSortImplementation<Integer> treeSort = new TreeSortImplementation<Integer>();
		Node<Integer> node = new Node<Integer>(arr[0]);
		for (int i = 1; i < 5; i++) {
			treeSort.insertTree(node, arr[i]);
		}
		output = treeSort.inorder(node, arr);
		assertNotEquals(result, output);
	}

}
